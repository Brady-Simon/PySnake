import torch
import torch.optim as optim
import torch.nn as nn
from Models.SnakeBoard import SnakeBoard


class GenericSnakeAI(nn.Module):
    """A neural network that decides snake movements based on directions.

    Input lists should match the following structure:
     - Size X list
     - Direction snake is facing [1, 0, 0, 0] (length 4)
     - Direction of the point [0, 1, 1, 0] (length (4)
     - Vision around the snake (3x3 grid, 5x5 grid, etc.)

    """

    def __init__(self, vision_radius: int = 2, debug: bool = False):
        """Creates a `GenericSnakeAI`.

        Args:
            vision_radius (int): How far the snake can see in blocks.
            debug (bool): Whether or not to include diagnostic print statements.
        """
        super().__init__()
        self.debug = debug
        self.lossHistory = []
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

        inputSize: int = 8 + (2 * vision_radius + 1)**2
        hiddenSize1 = int(inputSize * 3 / 8)
        hiddenSize2 = int(hiddenSize1 * 3 / 5)
        # 32 20 12 4
        self.hiddenLayer1 = nn.Linear(inputSize, hiddenSize1).to(self.device)
        self.hiddenLayer2 = nn.Linear(hiddenSize1, hiddenSize2).to(self.device)
        self.outputLayer = nn.Linear(hiddenSize2, 4).to(self.device)

    def forward(self, x):
        """Forwards tensor `x` through the neural network.

        Args:
            x (tensor): The tensor to forward.

        Returns:
            tensor: The value generated by the neural network.
        """
        x = self.hiddenLayer1(x)
        x = torch.relu(x)

        x = self.hiddenLayer2(x)
        x = torch.relu(x)

        x = self.outputLayer(x)
        x = torch.sigmoid(x)
        return x

    def train(self, iterations=50, epochs=30, learningRate=0.05):
        """Trains the neural net to master Tic-Tac-Toe.

        Args:
            iterations (int): The number of times to execute the training match.
            epochs (int): The number of times to repeat `iterations`.
            learningRate (float): The rate at which the neural network learns.

        Returns:
            (list, list): The loss history and epoch history after training.
        """
        self.lossHistory = []
        optimizer = optim.SGD(self.parameters(), lr=learningRate, momentum=0.9)
        epochHistory = []

        for epoch in range(epochs):
            if self.debug:
                print(f"Epoch {epoch}. ", end='')
            for iteration in range(iterations):
                self.trainingMatch(optimizer)
            if self.debug:
                print(f"Average loss: {sum(self.lossHistory) / len(self.lossHistory)}.")
            epochHistory.append(sum(self.lossHistory) / len(self.lossHistory))

        return self.lossHistory, epochHistory

    def boardToTensor(self, gameBoard: SnakeBoard):
        """Converts a board to a usable Tensor for input into the ANN.

        Args:
            gameBoard (TicTacToeBoard): The board being converted to a tensor.

        Returns:
            tensor: A 27-length tensor that represents the locations of X, O, and empty spaces.
        """
        results = []
        # TODO: Implement
        return torch.Tensor(results).to(self.device)
